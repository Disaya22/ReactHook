1. useState Hook
The React useState Hook allows us to track state in a function component.

State generally refers to data or properties 
that need to be tracking in an application.


2. Import useState 
To use the useState Hook, we first need to import it into our component.

file index.js
import {useState} from "react";

Notice that we are destructuring useState from react as it is a named export.

destructuring in ES6


3. Initialize useState
We initialize our state by calling useState in our function component.

useState accepts an initial state and returns two vlues:

    1. The current state (data or properties that need to be tracking).
    2. A function that updates the state.

file index.js
import {useState} from "react";

function FavoriteColor() {
    const [color, setColor] = useState("");
}


Explanation:
    1. Notice that again, we are destructuring 
    the returned values from useState.
    2. The first value, color, is our current state.
    3. The second value, setColor, is the function 
    that is used to update our state.

    note: These names are variables 
    that can be named anything you would like.

    4. Lastly, we set the initial state 
    to an empty string: useState("")


4. Read State
We can now include our state anywhere in our component.

Use the state variable in the rendered component.

file index.js
import { useState } from "react";
import ReactDOM from "react-dom/client";

function FavoriteColor() {
  const [color, setColor] = useState("red");

  return <h1>My favorite color is {color}!</h1>
}

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<FavoriteColor />)


5. Update State
To update our state, we use our state updater function.

We should never directly update state. Ex: color = "red" is not allowed.

Use a button to update the state:

file index.js
import { useState } from "react";
import ReactDOM from "react-dom/client";

function FavoriteColor() {
  const [color, setColor] = useState("red");

  return (
    <>
    <h1>My favorite color is {color}!</h1>
    <button
        type="button"
        onClick={ ()=> setColor("blue")}
    >Blue</button>
    </>
  )
}

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<FavoriteColor />);


6. What can State hold?
    6.1 The useState Hook can be used to keep track of strings,
    numbers, booleans, arrays, objects, and any combination of these!

    6.2 We could create multiple state Hooks to track individual values.

file index.js
import { useState } from "react";
import ReactDOM from "react-dom/client";

function Car() {
    const [brand, setBrand] = useState("ford");
    const [model, setModel] = useState("Mustang");
    const [year, setYear] = useState("1964");
    const [color, setColor] = useState("red");


    return (
        <>
        <h1>My {brand}</h1>
        <p>It is {color} {model} from {year}</p>
        </> 
    )
}
const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<Car />);


Or, we can just use one state and include an object instead!

file index.js
import { useState } from "react";
import ReactDOM from "react-dom/client";

function Car() {
  const [car, setCar] = useState({
    brand: "Ford",
    model: "Mustang",
    year: "1964",
    color: "red"
  });

  return (
    <>
      <h1>My {car.brand}</h1>
      <p>
        It is a {car.color} {car.model} from {car.year}.
      </p>
    </>
  )
}

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<Car />);


NOTICE:
Since we are now tracking a single object, 
we need to reference that object 
and then the property of that object 
when rendering the component. (Ex: car.brand)



7. Updating Objects and Arrays in State
  7.1 When state is updated, the entire state gets overwritten.

  7.2 If we only called setCar({color: "blue"}), 
  this would remove the brand, model, 
  and year from our state.

  7.3 We can use the JavaScript spread operator to help us.


Use the JavaScript spread operator to update only the color of the car:

file index.js
import { useState } from "react";
import ReactDOM from "react-dom/client";

function Car() {
  const [car, setCar] = useState({
    brand: "Ford",
    model: "Mustang",
    year: "1964",
    color: "red"
  });

  const updateColor = ()=> {
    setCar(previousState => {
      return { ...previousState, color: "blue"}
    });
  }

  return (
    <>
      <h1>My {car.brand}</h1>
      <p>
        It is a {car.color} {car.model} from {car.year}.
      </p>

      <button
        type="button"
        onClick={updateColor}
      >Blue</button>
    </>
  )
}

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<Car />);


Explanation:
Because we need the current value of state, we pass a function into our setCar function. This function receives the previous value.

We then return an object, spreading the previousState and overwriting only the color.
